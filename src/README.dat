
packages:
___________________________fileReader_______________________________
FileReader.java - reads the file line by line - thus creating an iterator to 
be used by the parser, so the file can be read line by line and analyzed.

LineToken.java - A class representing a class token which volds a read line 
form the the source file and it's line number.

______________________________main_________________________________
IncorrectProgramUsage.java - Exception to annotate a case in which the program 
was launched with wrong parameters.

MasterException.java - Master excepton class used in order to be the basic 
exception which holds the joined use methods.

MasterTypeOneException.java - An exception Class extending the java exception 
class which represent the father of all type one exceptions 

MasterTypeTwoException.java - An exception Class extending the java exception 
class which represent the father of all type two exceptions  = serious erros

Sjavac.java - main class supposed to run the show and lunch the main 
components of the code check.

______________________________nodes_________________________________
BadMemeberNameDiscovered.java - An Exception Class extending 
MasterTypeOneException and represents a bad naming of a member.

IllegalCastingOfDifferentDataTypes.java - An Exception Class extending 
MasterTypeOneException and represents an illegal casting between two different
types of variables

CastingRulesTable.java - A class representing the allowed and proper Casting 
Rules Table

DeclerationTypeTable.java - A Class representing the Declaration Type Table

NodeType.java -  Enum Class representing the Possible node types

________________________nodes.generalTypes___________________________
AdvancedNode.java - An abstract class represnting an advance node - 
a node which contains a scope and is not limited to one line.

OneLinerNode.java - An abstract class which represent a single one liner 
command node - extends SimpleNode.

SimpleNode.java - An abstract Class represent a node - The father of all nodes

VariableNode.java - A Class representing the VariableTable of each scope

________________________nodes.mediator______________________________
AssignedVariableExistsButNotInitialized.java - An Exception Class extending 
MasterTypeOneException and represents an assigned variable which exists, 
yet is not initialized
 
IllegalAssignmentFromArrayToInteger.java - An Exception Class extending 
MasterTypeOneException and represents an illegal assignemnt from array 
to integer

IllegalMathOperation.java - An Exception Class extending 
MasterTypeOneException and represents an illegal math operation.

MissingParameterDeceleration.java - An Exception Class extending 
MasterTypeOneException and represents a parameter which is missing the 
proper declaration
 
NodeMediator.java -  the node mediator supposed to support operationes 
between the method and cope nodes and their children during the code 
verification test mainly in the samantical analysys process

NoSuchMethodORVariable.java - An Exception Class extending 
MasterTypeOneException and represents that the looked up method or variable 
do not exist

RequiredMethodCallParametersNotFitContract.java - An Exception Class 
extending MasterTypeOneException and represents that the method was not 
called with the correct parameters.

ReturnTypeNotFitMethodDeclarations.java - An Exception Class extending 
MasterTypeOneException and represents that for a method the return type -
doesn't not fit the method declaration

WrongSyntaxVariabalsInPretzels.java - An Exception Class extending 
MasterTypeOneException and represents that a wrond snytax appeared within 
the barackets

________________________nodes.nodeFactories____________________________
AdvancedNodeFactory.java - A factory for all advance nodes types - 
sort the information given into to send into the right constructor and 
return the built node.

DecelerationType.java - An enum representing the declartion types possible

OneLinerNodeFactory.java - A factory for all one liner nodes types -
sort the information given into to send into the right constructor and 
return the built node.

SimpleFactory.java - A simple factory - which interprets what is the 
line Declaration type

UnknowenDeclerationInThisLine.java - An Exception Class extending 
MasterTypeOneException and represents an unknown variable type declaration

VariableNodeFactory.java - Sort out to send to the right constructor 
throughout of the possible variable types.


________________________nodes.oneLineNodes____________________________
ArrayAssignmentNodeDecorator.java - A Class that decorates a regular 
assignment statement to hold an array assignment

ArrayNodeDecorator.java - A node that marks an array deceleration in to code
with or without initialization.

AssignmentNode.java - A class representing an Assignment 
node (i.e a=b,a=b[1],a={})

CallMethodNode.java - A class representing a Call Method node i.e. foo()

ReturnNode.java - A class representing a return statement node

VariableNode.java - A class representing a variable node

___________________nodes.oneLineNodes.variables________________________
BooleanNode.java - A class representing a Boolean variable node

CharNode.java - A class representing a char variable node

DoubleNode.java - A class representing a double variable node

IntNode.java - A class representing an int variable node

StringNode.java - A class representing a string variable node

_________________________nodes.scopeNodes_____________________________
EnvironmentNode.java - A father nodes that holds all the member 
variabals and methods in the file to ease run the code test

IfConditionalNode.java - An if condition node.

MethodNode.java - A class representing a method OneLinerNode in the code

ScopeNode.java -  A class representing a node with a scope in the code

WhileLoopNode.java - A while loop node

________________________________parser________________________________
LineHasInsideCommentsException.java - An Exception Class extending 
MasterTypeOneException and represents that a line has inside comments within

LineParser.java - A class representing the parser which analyze the line from 
the file he gets, and creates using the approuate factories nodes.

LineSyntaxException.java - An Exception Class extending MasterTypeOneException 
and represents that there is a syntax problem within the line

UnexpectedEndOfFile.java - An Exception Class extending MasterTypeOneException 
and represents that the end of the file reached before all closers part needed 
by the file

WrongEndLine.java - An Exception Class extending MasterTypeOneException and 
represents that a line ended in an incorrect manner

___________________________semanticAnalyzer___________________________
DuplicateVariableDeclerationException.java - An Exception Class extending 
MasterTypeOneException and represents duplicates of the variable already exist

MethodReturnSyntexException.java - An Exception Class extending 
MasterTypeOneException and represents a method return staement with a syntax
error in it

MoreThenOneReturnStatement.java - An Exception Class extending 
MasterTypeOneException and represents more than return statement was 
within the method

SemanticAnalyzer.java - the semantic analyzer which checks the deeper 
side of the declerations, checks the assignments, methods call, variabals 
and etc.

================================== Design ==================================

Hieraracy:
oop.
	ex7.
		fileReader:
			FileReader.java
			LineToken.java
			
		main:
			IncorrectProgramUsage.java
			MasterException.java
			MasterTypeOneException.java
			MasterTypeTwoException.java
			Sjavac.java
			
		nodes:
			BadMemeberNameDiscovered.java
			IllegalCastingOfDifferentDataTypes.java
			CastingRulesTable.java
			DeclerationTypeTable.java
			NodeType.java
			
			mediator:
				AssignedVariableExistsButNotInitialized.java
				IllegalAssignmentFromArrayToInteger.java
				IllegalMathOperation.java
				MissingParameterDeceleration.java
				NodeMediator.java
				NoSuchMethodORVariable.java
				RequiredMethodCallParametersNotFitContract.java
				ReturnTypeNotFitMethodDeclarations.java
				WrongSyntaxVariabalsInPretzels.java
			
			generalTypes:
				AdvancedNode.java
				OneLinerNode.java
				SimpleNode.java
				VariableNode.java
				
			nodeFactories:
				AdvancedNodeFactory.java
				DecelerationType.java
				OneLinerNodeFactory.java
				SimpleFactory.java
				UnknowenDeclerationInThisLine.java
				VariableNodeFactory.java
			
			oneLineNodes:
				ArrayAssignmentNodeDecorator.java
				ArrayNodeDecorator.java
				AssignmentNode.java
				CallMethodNode.java
				ReturnNode.java
				VariableNode.java
			
				variables:
					BooleanNode.java
					CharNode.java
					DoubleNode.java
					IntNode.java
					StringNode.java
			
			scopeNodes:
				EnvironmentNode.java
				IfConditionalNode.java
				MethodNode.java
				ScopeNode.java
				WhileLoopNode.java
				
		parser:
			LineHasInsideCommentsException.java
			LineParser.java
			LineSyntaxException.java
			UnexpectedEndOfFile.java
			WrongEndLine.java
			
		semanticAnalyzer:
			DuplicateVariableDeclerationException.java
			MethodReturnSyntexException.java
			MoreThenOneReturnStatement.java
			SemanticAnalyzer.java
			
Further explanation on Design given in the answers below

========================== Implementation Issues ===========================

In the main comparison method we have built it in a recursive manner such that
it could tackle on a longer more complex math operation such as 5+6*9/4... 
By doing so we didn't meet the requirements of SJAVAC. Since we found our 
method better for future design we have inserted a �bug� that checks if the 
math operation is longer than one operation.


=========================== Answers to Questions ===========================
1. Design, and thinking process (and ruled out alternatives)

As suggested in the PDF and in class we used a similar Design to ex6 Design. 
While the task here is very different than the one in ex6, our working process 
was the same. We first tried to divide our program into small independent 
units.  Only than we chose the parts its piece would play in the project � 
what does it must know? How can it work most individually without depending or 
knowing about other parts or the program. Gradually we began to form from each 
piece what finally became to be our design � which in the most basic terms � 
is a combination of what we learned throughout the excresizes.
At first, we considered what was the best way to process t data in the parser. 
Out of the options we addresses A-character by character B-word by word 
C-line by line, We chose option C as our best options. First of all like we 
learned in DAST it is better to chose and parse "small" chunks of data each 
time (yet not too small) in both meaning of storage space and run time. 
Second It follows the object oriented programing principles studied in 
class � by being able to minimize the interaction and making each module know
only its own needed logic, making it independent. The pros were also the 
greatest (considering the sjavac structure) since it would aid us greatly 
to decide what if the proper division of analyzing. Cutting by line aid us 
building a method which divide the line into further analysis and each separate
part knew its own requirements such as structure pattern � available or 
important keywords and other special attributes. The cons of course are mainly
that we ran on the text  more than once � reading it, deciding where to send
it and then analyzing it. The other options as explained are less "OOPy" and
less fitted for this exercise.

Furthermore we have used the mediator desgin explained towards this excersize
in our nodes - since we didn't want all nodes will kno the interaction or 
existance of one another we have used a node mediator in order to make the 
needed possible logical connections - and hierechy neeeded.

Enum were used throughout the project such as NodeTypes enum in the nodes
package which represented all the basic types of nodes possible.

Our second main decision was on how we should divide the analyzed data of each
line. Throughout the possibilities of separated tokens of words or lines we
realized during programming, if we did (as we first started) wanted to work
with tokens each representing a single word an only than using those tokens 
check the legality of the statement. We actually reproduce a new regex system
 in the process which lacked the beauty of the java implemented method and 
 operations. Therefore we kept the Tokens based on line-logic meaning the 
 tokens are separated by the logical operation induced in the line (assigns 
 variable/array or initializing etc..). In conclusion it was best fitted 
 sorting out the line in line-logic as explained than sending them out to 
 factories � which are mindless factories which has no knowledge of what is 
 within � only its meeting criteria to e send to production somewhere else. 
 Than different Classes were created and named Node with memory of the node 
 exercise.
Using the Decorator module we learned it was easy to implement Array nodes 
in all of their verses (Initializing/ assigning / variable etc..) we could 
change any basic type into an array with minimal changes. Using this kind 
of method to create  the additional required array type � we also were looking 
for the future if we wished to put array of array and so on � it would be with
 the least possible changes.
Third main problem was finding a way to recursively check the parameter of each
 node which interacted with each other in different levels .Understanding 
 gradually we came to the knowledge of the program needed possible levels of
  interaction, starting from top main level which each decreasing of level 
  was formed from understanding the logic of the "scope nodes" . By diving 
  out nodes into one lined operation � which kept there activity and 
  information only in the level they are, if,while and method statements 
  needed opening up a new level of information. Out of the different 
  possibilities of containing and storing the data of each level we chose 
  using a variable and method tables which contained for each level all of
   its initialized variables and methods. Than we have written a recursive 
   logic that made interaction with upper levels possible. Its time a 
   parameter is used and not initialized � we used a deep validation 
   process which keep checking the tables for each level up the highest one � 
   if it is found, we can grab information about it (its type, statement, 
   required parameters�)  if not than this is an illegal scope operation.
   
We also thought about creating a calss that would have all of the regex within
and other classes would take all the rgex from it like a regex repository. yet
thinknig more about it we came to understand this enum, or class would be not
oopy since each componenet should contain the data it needs and have and no 
super father storage class is neeeded - so the seperated the regex through the
hierechy 
 
Other important Decision regarding our project was to be as understood as 
possible when sending out an error of an illegal sjavac document � therefore 
many exceptions were created in the process (as required in the PDF) in order
 to do so.
In addition we have successfully merged all the comparing operation into one 
mechanism with understand fully all of the interaction possibilities and uses 
smaller build in method we wrote in order to compare successfully all of 
the possible connections.


How to modify your code to add new types of variables (e.g., short)?

Using out design it is easy adding up new types of variables � with minimal 
changes.  For short in example would just be an extended class of int with 
its own special requirements and logic tests within. It affect only two places 
in addition which is the factory � which must know it exists to be able to send 
it to him to construct. The second is the comparer which must understand what 
are its legal operation and interaction with other existing variables.

3. Below are two features your program currently does not support. Please 
select one of them, and describe which modifications/extensions would you have
to make in your code in order to support it. Please briefly describe which 
classes would you add to your code, which methods would you add to existing 
classes, and which classes would you modify.
You are not required to implement these features.
 
if-else block.
A simple decorator to the scope node department would do the trick. Using the
 sjavac logic given there is not much difference in while and if statement � 
 yet it is easily has the possibility to separate into different nodes. Making 
 sure both are extensions of scope node � meaning they recreate new levels of 
 information within � adding a decorator to the if Node implemented in such a 
 way like the negated decorator used in previous EX6. It is also possible to 
 create an else if ability recursively making it exactly like in java. In 
 addition to the decorator the factory will need to be able to know the new 
 reserved "else" block. The last adjustment would to be to induce within the 
 if-else block the logic operation carried out by it � meaning it has to know 
 its logic making sure all parts of it are reachable and structure of course. 
 Using our design only minimal changes are needed

